'''
Take the results generated by compute_FOM_parameter_space.py and use these to build and compute ROM.
'''

import time

import dolfin
import multiprocessing as mp

# from mshr import *
import matplotlib.pyplot as plt
import numpy as np
import rich.console
import rich.table
from dolfin import *

from FOM import FOM
from ROM import ROM

import pickle

import logging
# configure logger
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s", datefmt="%H:%M:%S"
)



import argparse

# Create the parser
parser = argparse.ArgumentParser(description="Compute FOM for a range of Reynolds numbers.")

# Add the arguments
parser.add_argument('--start', type=int, default=50, help='The start value for the Reynolds numbers.')
parser.add_argument('--end', type=int, default=200, help='The stop value for the Reynolds numbers.')
parser.add_argument('--step', type=int, default=5, help='The step value for the Reynolds numbers.')


# Parse the arguments
args = parser.parse_args()

print(args.start, args.end, args.step)

# Turn off interactive mode
plt.ioff()

# from os import environ
# environ['OMP_NUM_THREADS'] = '32'

# ---------- FEniCS parameters ---------
parameters["reorder_dofs_serial"] = False
set_log_active(False) # turn off FEniCS logging

# ----------- FOM parameters -----------
# nu = Constant(0.001)    
theta = 0.5
T =  20.0 # 5.  # 10.0
dt = 0.01
n_timesteps = int(T / dt)
# dt = T / n_timesteps

# ----------- ROM parameters -----------
REL_ERROR_TOL = 1e-2
MAX_ITERATIONS = 100
TOTAL_ENERGY = {
    "primal": {
        "velocity": 1 - 1e-6,
        "pressure": 1 - 1e-6,
    },
}


Re = np.arange(args.start, args.end+1, args.step)

logging.info(f"Re = {Re}")

parameter_index = 0

# one FOM for whole parameter space 
master_FOM = FOM(0, T, dt, theta, 0.1/Re[parameter_index])


# solve auxiliary FOM cost functionals 
master_FOM.load_solution_parallel()
master_FOM.compute_drag_lift()

# logging.info(f"# time points = {len(fom.time_points)}")
# logging.info(f"# Re = {len(Re)}")

# fom.time_points = np.arange(fom.t, len(Re) * fom.T + fom.dt, fom.dt)

# logging.info(f"# time points = {len(fom.time_points)}")


master_ROM = ROM(
    master_FOM,
    REL_ERROR_TOL=REL_ERROR_TOL,
    MAX_ITERATIONS=MAX_ITERATIONS,
    TOTAL_ENERGY=TOTAL_ENERGY,
)

# compute lifting that can be used for all Re, but initialize with first Re
master_ROM.compute_lifting_function(force_recompute=True)

FOM_snapshots = {
    "velocity": np.empty((master_FOM.dofs["velocity"], 0)),
    "pressure": np.empty((master_FOM.dofs["pressure"], 0)),
    "supremizer": np.empty((master_FOM.dofs["velocity"], 0)),
}

# make a dictionary of fom classes with reynolds number as key
FOM_dict = {}
ROM_dict = {}
for re in Re:
    fom = FOM(0, T, dt, theta, 0.1/re)
    # fom.load_solution_parallel()
    FOM_dict[re] = fom
    ROM_dict[re] = ROM(
        fom,
        REL_ERROR_TOL=REL_ERROR_TOL,
        MAX_ITERATIONS=MAX_ITERATIONS,
        TOTAL_ENERGY=TOTAL_ENERGY,
    )

# shift to exlude "Einschwingphase"
shift = 500

for re in Re:
    logging.info(f"Re = {re}")
    # fom = FOM(0, T, dt, theta, 0.1/re)
    FOM_dict[re].load_solution_parallel()
    FOM_snapshots["velocity"] = np.hstack((FOM_snapshots["velocity"], FOM_dict[re].Y["velocity"][:, shift:]))
    FOM_snapshots["pressure"] = np.hstack((FOM_snapshots["pressure"], FOM_dict[re].Y["pressure"][:, shift:]))
    
for re in Re:    
    ROM_dict[re].compute_supremizer(force_recompute=False)
    FOM_snapshots["supremizer"] = np.hstack((FOM_snapshots["supremizer"], ROM_dict[re].fom.Y["supremizer"][:, shift:]))

# lists of matrix array to a single numpy arrays by concatenating along axis 1


# FOM_snapshots["velocity"] = np.concatenate(FOM_snapshots["velocity"], axis=1)
# FOM_snapshots["pressure"] = np.concatenate(FOM_snapshots["pressure"], axis=1)
# FOM_snapshots["supremizer"] = np.concatenate(FOM_snapshots["supremizer"], axis=1)

# subtract lifting function for velocity and supremizer from each column vector

for i in range(FOM_snapshots["velocity"].shape[1]):
    FOM_snapshots["velocity"][:,i] -= master_ROM.lifting["velocity"]
    FOM_snapshots["supremizer"][:,i] -= master_ROM.lifting["velocity"]

logging.info(f"shape of FOM_snapshots['velocity'] = {FOM_snapshots['velocity'].shape}")
logging.info(f"shape of FOM_snapshots['pressure'] = {FOM_snapshots['pressure'].shape}")
logging.info(f"shape of FOM_snapshots['supremizer'] = {FOM_snapshots['supremizer'].shape}")

master_FOM.assemble_lifting_matrices(lifting=master_ROM.lifting)

# FOM Matrices
master_FOM.assemble_linear_operators()

try:
    # data = dict(np.load(f"results/POD_{args.start}_{args.end}.npz", allow_pickle=True))
    logging.info("Loading POD basis from disk")

    with open(f"results/POD_{args.start}_{args.end}.pickle", 'rb') as f:
        data = pickle.load(f)
    
    master_ROM.POD = data
    
except:
    logging.info("Starting POD (SVD) computation")
    # build and init POD bases 

    master_ROM.POD["primal"]["velocity"]["bunch_size"] = int(FOM_snapshots["velocity"].shape[1]/len(Re))
    master_ROM.POD["primal"]["pressure"]["bunch_size"] = int(FOM_snapshots["pressure"].shape[1]/len(Re))
    master_ROM.POD["primal"]["supremizer"]["bunch_size"] = int(FOM_snapshots["supremizer"].shape[1]/len(Re))

    logging.info(f"bunch size = {master_ROM.POD['primal']['velocity']['bunch_size']} and #snapshots = {FOM_snapshots['velocity'].shape[1]}")    # loop over columns of FOM_snapshots 
    for i in range(FOM_snapshots["velocity"].shape[1]):
        master_ROM.iPOD(FOM_snapshots["velocity"][:, i], type="primal", quantity="velocity", equal_size=False)
        master_ROM.iPOD(FOM_snapshots["pressure"][:, i], type="primal", quantity="pressure", equal_size=False)
        master_ROM.iPOD(FOM_snapshots["supremizer"][:, i], type="primal", quantity="supremizer") 

    # logging.info(f"VELOCITY POD size:   {master_ROM.POD['primal']['velocity']['basis'].shape[1]}")
    # logging.info(f"PRESSURE POD size:   {master_ROM.POD['primal']['pressure']['basis'].shape[1]}")
    # logging.info(f"SUPREMIZER POD size: {master_ROM.POD['primal']['supremizer']['basis'].shape[1]}")

    # master_ROM.iPOD(FOM_snapshots["velocity"][:, -1], type="primal", quantity="velocity", equal_size=False, empty_bunch_matrix=True)
    # master_ROM.iPOD(FOM_snapshots["pressure"][:, -1], type="primal", quantity="pressure", equal_size=False, empty_bunch_matrix=True)
    # master_ROM.iPOD(FOM_snapshots["supremizer"][:, -1], type="primal", quantity="supremizer", empty_bunch_matrix=True)

    # master_ROM.iPOD(FOM_snapshots["velocity"], type="primal", quantity="velocity", equal_size=True)
    # master_ROM.iPOD(FOM_snapshots["pressure"], type="primal", quantity="pressure", equal_size=True)
    # master_ROM.iPOD(FOM_snapshots["supremizer"], type="primal", quantity="supremizer")

    logging.info(f"VELOCITY POD size:   {master_ROM.POD['primal']['velocity']['basis'].shape[1]}")
    logging.info(f"PRESSURE POD size:   {master_ROM.POD['primal']['pressure']['basis'].shape[1]}")
    logging.info(f"SUPREMIZER POD size: {master_ROM.POD['primal']['supremizer']['basis'].shape[1]}")

    # save the POD dict to disk in results dir
    np.savez(f"results/POD_{args.start}_{args.end}.npz", **master_ROM.POD)
    with open(f"results/POD_{args.start}_{args.end}.pickle", 'wb') as f:
        pickle.dump(master_ROM.POD, f)

# monitor sizes of PODs
logging.info(f"VELOCITY POD size:   {master_ROM.POD['primal']['velocity']['basis'].shape[1]}")
logging.info(f"PRESSURE POD size:   {master_ROM.POD['primal']['pressure']['basis'].shape[1]}")
logging.info(f"SUPREMIZER POD size: {master_ROM.POD['primal']['supremizer']['basis'].shape[1]}")

# continue with normal ROM computation stuff 
master_ROM.compute_reduced_matrices()


# solve ROM
master_ROM.solve_primal()
master_ROM.compute_drag_lift()


# find where time points is >= 15
index = np.where(master_ROM.fom.time_points >= 15)[0][0]


# compare ROM and FOM drag and lift coefficients in plot 
plt.figure()
plt.subplot(1, 2, 1)
plt.plot(master_FOM.time_points[index:], master_FOM.drag_force[index:], label="FOM")
plt.plot(master_ROM.fom.time_points[index:], master_ROM.drag_force[index-1:-1], label="ROM")
plt.legend()
plt.grid()
plt.title("Drag Force")
plt.subplot(1, 2, 2)
plt.plot(master_FOM.time_points[index:], master_FOM.lift_force[index:], label="FOM")
plt.plot(master_ROM.fom.time_points[index:], master_ROM.lift_force[index-1:-1], label="ROM")
plt.legend()
plt.grid()
plt.title("Lift Force")

plt.show()

plt.savefig(f"results/drag_lift_parameterized_Re_{Re[parameter_index]}.png")